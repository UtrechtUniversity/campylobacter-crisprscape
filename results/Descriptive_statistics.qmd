---
title: "Descriptive statistics"
author:
  - name: "Sam Nooij"
    affiliations:
      - ref: UU-KLIF
    orcid: 0000-0001-5892-5637
    email: s.nooij [at] uu.nl
    corresponding: true

affiliations:
  - id: UU-KLIF
    name: Utrecht University
    department: Faculty of Veterinary Medicine, Department of Clinical Infectiology
    address: Yalelaan 1
    city: Utrecht
    country: The Netherlands
    postal-code: 3584CL

date: "2024-12-03"

execute: 
  echo: true
  warning: false
  message: false
  cache: true

format: 
  html:
    toc: true
    toc-depth: 3
    code-fold: true
    df-print: paged
    fig-height: 4
    fig-width: 7
  pdf:
    documentclass: report
    classoption: [twocolumn, landscape]
    mainfont: "Open Sans"
    mainfontoptions:
      - Color=101010
    colorlinks: true
    toc: true
    toc-depth: 3
    number-sections: true
    number-depth: 3
    highlight-style: github

knitr:
  opts_chunk: 
    cache: true

editor:
  markdown:
    wrap: 72
---

# CRISPR spacers in *Campylobacter*

**Descriptive statistics of CRISPR arrays in *Campylobacter* genomes
from
[AllTheBacteria](https://allthebacteria.readthedocs.io/ "AllTheBacteria documentation")**

We have downloaded all the *Campylobacter* *jejuni* and *C. coli*
genomes from AllTheBacteria (ATB) to screen for CRISPR spacers. The
current experiment includes all genomes that have been classified as
'Campylobacter_D jejuni\*' or 'Campylobacter_D coli\*' using
[Sylph](https://www.nature.com/articles/s41587-024-02412-y "Shaw & Yu, 2024. Nature Biotechnology")
(which the creators of ATB ran on all genomes), that have been added to
ATB in the incremental update of August 2024 (@fig-number_of_species).
(âˆ—: any species designation matching these name prefixes were included.)
These genomes have been screened for CRISPR ([Clustered Regularly
Interspaced Short Palindromic
Repeats](https://en.wikipedia.org/wiki/CRISPR "CRISPR wiki")) spacers
and *Cas* (CRISPR-associated) genes using
[CCTyper](https://www.biorxiv.org/content/10.1101/2020.05.15.097824v1 "Russel et al., 2020. bioRxiv")
(version 1.8.0). CCTyper produces tab-separated tables that summarise
the CRISPRs, including number of contigs containing CRISPR arrays,
number of spacers per array, number of repeat sequences, consensus
repeat sequence, and presence of Cas genes. From these results, we can
view:

1.  The [number of CRISPR arrays](#crispr-arrays-per-genome) detected
    per genome\
    (Taking into account the presence of *Cas* genes)

2.  Prevalence of CRISPR arrays overall and per species

3.  Type of CRISPR arrays (and prevalence)

4.  Number of CRISPR spacers per genome and per species

5.  Length of the CRISPR spacers and repeat sequences

6.  Repeat consensus sequence diversity

*Note: see the relevant [CCTyper
documentation](https://github.com/Russel88/CRISPRCasTyper?tab=readme-ov-file#output- "CCTyper output files documentation")
of output files.*

```{r setup, include=FALSE}
library(knitr)
library(rmarkdown)
library(here)
library(tidyverse)
library(ggpubr)
library(RColorBrewer)
library(viridisLite)
library(patchwork) # Combine figures while aligning axes
library(rstatix) # for convenient statistical tests and p-value reporting
library(scales) # for manually adjusting log-scale figure axes
library(colorspace) # for filling boxplots/violins with lighter shade of same colour

knitr::opts_knit$set(base.dir = here(""))
```

In this analysis report, we summarise the prevalence and other general
descriptive statistics of the CRISPR spacers. Therefore, we first need
to import the results from CCTyper:

```{r import_cctyper_results}
#| message: false

# Files were originally processed in batches
batches <- Sys.glob(here("data/tmp/cctyper/batch_*"))

# Read the tab-separated files for each batch and concatenate them
read_multiple_tables <- function(input_files) {
  return(
    data.frame(Filename = input_files,
               read_delim(input_files,
                          show_col_types = F,
                          trim_ws = T))
  )
}

# Try reading concatenated files, or read separate files from batches
#  and save as one concatenated file
read_or_create <- function(table_file) {
  if(file.exists(table_file)) {
    message(paste(basename(table_file), "exists already, reading from file!"))
    return(read_delim(table_file, show_col_types = F))

  } else {
    message(paste(
      basename(table_file),
      "does not yet exist. Concatenating batch tables..."))

    table_wildcard <- gsub(x = basename(table_file),
                           pattern = "concatenated",
                           replace = "*")
    file_list <- Sys.glob(paste0(batches, "/", table_wildcard))
    df <- do.call("rbind", lapply(file_list, read_multiple_tables))
    write_delim(x = df, file = table_file, delim = "\t")
    return(df)
  }
}


CRISPR_Cas_df <- read_or_create(
  here("data/processed/CRISPR_Cas-concatenated.tab")
)

crisprs_all_df <- read_or_create(
  here("data/processed/crisprs_all-concatenated.tab")
)

crisprs_near_cas_df <- read_or_create(
  here("data/processed/crisprs_near_cas-concatenated.tab")
  ) %>%
  select(-Contig) %>%
  separate_wider_delim(cols = CRISPR, delim = ".",
                       names = c("sample_accession", "Contig")) %>%
  separate_wider_delim(cols = Contig, delim = "_",
                       names = c("Contig", "CRISPR_number"))

crisprs_orphan_df <- read_or_create(
  here("data/processed/crisprs_orphan-concatenated.tab")
  ) %>%
  select(-Contig) %>%
  separate_wider_delim(cols = CRISPR, delim = ".",
                       names = c("sample_accession", "Contig")) %>%
  separate_wider_delim(cols = Contig, delim = "_",
                       names = c("Contig", "CRISPR_number"))
```

The output of CCTyper only contains sample accession IDs that can be
used to identify samples. Import a minimal set of ENA metadata and
species identifications by Sylph:

```{r import_metadata}
#| fig-width: 5
#| fig-height: 1
#| label: fig-number_of_species
#| fig-cap: "Number of species present in dataset"
#| message: false

campylobacter_metadata_file <- here("data/processed/Campylobacter_ATB_metadata.tsv")

if(file.exists(campylobacter_metadata_file)) {
  message("Reading Campylobacter metadata file!")
  campylobacter_metadata <- read_delim(
    campylobacter_metadata_file,
    show_col_types = F)

} else {
  message("Creating Campylobacter metadata file...")
  total_campylobacter_metadata <- read_delim(
    here("data/ATB/ena_metadata.20240801.selection-only_Campylobacter.tsv.gz"),
    delim = "\t",
    col_names = F,
    show_col_types = F)

  older_campylobacter_metadata <- read_delim(
    here("data/ATB/ena_metadata.0.2.20240606.selection-only_Campylobacter.tsv.gz"),
    delim = "\t",
    col_names = F,
    show_col_types = F)

  # Remove the older entries to keep only the Campylobacter genomes
  # from the incremental update
  campylobacter_metadata <- total_campylobacter_metadata %>%
    filter(! X2 %in% older_campylobacter_metadata$X1)

  # Take the column names from the table before grepping
  colnames(campylobacter_metadata) <- read_delim(
    file = here("data/ATB/ena_metadata.20240801.selection.tsv.gz"),
    n_max = 1,
    delim = "\t",
    show_col_types = F
  ) %>% colnames()

  # Remove columns that contain only NA values
  campylobacter_metadata <- campylobacter_metadata %>%
    select_if(~sum(!is.na(.)) > 0)

  simplified_species <- read_delim(
    file = here("data/ATB/sylph.tsv.gz"),
    delim = "\t",
    show_col_types = F) %>%
    select(Sample, Species)

  campylobacter_metadata <- left_join(
    x = campylobacter_metadata,
    y = simplified_species,
    by = c("sample_accession" = "Sample")
  )

  # Remove all genomes whose taxonomic annotation (species) does
  # not start with 'Campylobacter'
  campylobacter_metadata <- campylobacter_metadata %>%
    filter(grepl("Campylobacter_D jejuni|Campylobacter_D coli", Species))

  write_delim(x = campylobacter_metadata,
              file = campylobacter_metadata_file,
              delim = "\t")
}

campylobacter_species_numbers <- campylobacter_metadata %>%
  mutate(species = if_else(grepl("jejuni", Species), "jejuni", "coli")) %>%
  count(species)

# Alternative visualisation method: stacked bar chart
stacked_species_plot <- ggplot(data = campylobacter_species_numbers,
                             aes(x = 0, y = n, fill = species)) +
  geom_bar(stat = "identity") +
  theme_pubr() +
  ggtitle(paste("Total genomes:",
                format(sum(campylobacter_species_numbers$n),
                       big.mark = ","))) +
  theme(axis.title = element_blank(),
        axis.ticks.y = element_blank(),
        axis.text.y = element_blank(),
        legend.position = "right") +
  scale_fill_manual(name = "Species",
                    values = c("#895d45", "#c6903c")) +
  coord_flip() +
  scale_y_continuous(expand = expansion(mult = c(0, 0.01))) +
  geom_text(aes(label = n %>%
                  format(big.mark = ",")),
            position = position_stack(vjust = 0.5),
            size = 4.5,
            color = "black")

stacked_species_plot
```

# CRISPR arrays per genome

We have identified CRISPRs in all *Campylobacter jejuni* and *C. coli*
genomes using
[CCTyper](https://github.com/Russel88/CRISPRCasTyper "GitHub repository for CRISPRCasTyper").
CCTyper separately annotates CRISPRs near *Cas* genes and separate
CRISPR arrays, called 'orphans'. To inventory the prevalence and size of
both types of CRISPR arrays, show for each genome the number of CRISPR
arrays as a scatterplot (@fig-crisprs_per_genome). (Derived from the
`CRISPR` field in CCTyper's output.)

```{r crisprs_per_genome}
#| label: fig-crisprs_per_genome
#| fig-cap: "Number of CRISPR arrays per genome"
#| fig-height: 4.5
#| fig-width: 7.5

annotated_crispr_number_df <- left_join(
  x = campylobacter_metadata %>%
    select(sample_accession, country, host, isolation_source,
           scientific_name, tax_id, Species, description),
  y = full_join(
    x = crisprs_near_cas_df %>%
      group_by(sample_accession) %>%
      count() %>%
      rename("CRISPRs near Cas" = "n"),
    y = crisprs_orphan_df %>%
      group_by(sample_accession) %>%
      count() %>%
      rename("Orphan CRISPRs" = "n"),
    by = "sample_accession"
  )
) %>%
  mutate(
    across(`CRISPRs near Cas`:`Orphan CRISPRs`,
           ~replace_na(., 0))
  )

number_of_crisprs_scatterplot <- ggplot(
  data = annotated_crispr_number_df,
  mapping = aes(x = `CRISPRs near Cas`,
                y = `Orphan CRISPRs`)
) +
  geom_point(position = position_jitter(),
             size = 0.7, alpha = 0.3) +
  theme_pubr()

crispr_near_cas_density = ggplot(
  data = annotated_crispr_number_df,
  mapping = aes(x = `CRISPRs near Cas`)) +
  geom_density(fill = "grey20") +
  theme_pubr() +
  theme(axis.title.x = element_blank())

orphan_crispr_density = ggplot(
  data = annotated_crispr_number_df,
  mapping = aes(y = `Orphan CRISPRs`)) +
  geom_density(fill = "grey20") +
  theme_pubr()

design <- "
1111#
22223
22223
"

crisprs_per_genome_figure <- crispr_near_cas_density +
  number_of_crisprs_scatterplot +
  orphan_crispr_density +
  plot_layout(design = design,
              axes = "collect")

crisprs_per_genome_figure
```

From this figure, it appears that by far the most genomes have no CRISPR
arrays at all, and otherwise they mostly have one CRISPR array near
*Cas* genes (one contig containing CRISPRs). At most, CCTyper has found
3 CRISPRs near *Cas* genes and up to 4 orphan CRISPRs Let's see this
distribution separately between *C. jejuni* and *coli*, and look at the
number of spacers per genome.

## Arrays per genome and per species

```{r spacers_per_genome_stats}
total_genomes = nrow(annotated_crispr_number_df)

annotated_crispr_number_df %>%
  count(`CRISPRs near Cas`, name = "Genomes") %>%
  mutate(Percentage = round(Genomes / total_genomes * 100, 2))

print("CRISPRs in Campylobacter jejuni")
annotated_crispr_number_df %>%
  filter(grepl(pattern = "Campylobacter_D jejuni", Species)) %>%
  group_by(`CRISPRs near Cas`) %>%
  summarise(Genomes = length(`CRISPRs near Cas`)) %>%
  mutate(total_genomes = sum(Genomes),
         Percentage = round(Genomes / total_genomes * 100, 2)) %>%
  select(-total_genomes)
# The number of other jejuni subspecies(?) is too low to do
# separate analyses, so just put them all together

print("Orphan CRISPRs in C. jejuni")
annotated_crispr_number_df %>%
  filter(grepl(pattern = "Campylobacter_D jejuni", Species)) %>%
  group_by(`Orphan CRISPRs`) %>%
  summarise(Genomes = length(`Orphan CRISPRs`)) %>%
  mutate(total_genomes = sum(Genomes),
         Percentage = round(Genomes / total_genomes * 100, 2)) %>%
  select(-total_genomes)

print("CRISPRs in Campylobacter coli")
annotated_crispr_number_df %>%
  filter(grepl(pattern = "Campylobacter_D coli", Species)) %>%
  group_by(`CRISPRs near Cas`) %>%
  summarise(Genomes = length(`CRISPRs near Cas`)) %>%
  mutate(total_genomes = sum(Genomes),
         Percentage = round(Genomes / total_genomes * 100, 2)) %>%
  select(-total_genomes)

print("Orphan CRISPRs in C. coli")
annotated_crispr_number_df %>%
  filter(grepl(pattern = "Campylobacter_D coli", Species)) %>%
  group_by(`Orphan CRISPRs`) %>%
  summarise(Genomes = length(`Orphan CRISPRs`)) %>%
  mutate(total_genomes = sum(Genomes),
         Percentage = round(Genomes / total_genomes * 100, 2)) %>%
  select(-total_genomes)
```
