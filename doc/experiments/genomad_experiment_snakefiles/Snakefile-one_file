"""
Author: Sam Nooij
Organisation: Utrecht University
Department: Clinical Infectiology (KLIF), Infectious Diseases & Immunology,
  Biomolecular Health Sciences, Faculty of Veterinary Medicine
Date: 2024-09-12

Workflow for testing CRISPR analysis options

Input: Fasta files of Campylobacter whole-genomes
Output: (various)

Example use:
    $ snakemake --profile config

N.B. Variables are set in the configuration files under `config`.
"""

from pathlib import Path
import functools
import operator

### Step 1: Import configuration file ###


configfile: Path("config/parameters.yaml")


# Use Python functions to automatically detect batches of genomes fasta files
# in the input directory as 'BATCHES' and 'SAMPLES'
INPUT_DIR = config["input_directory"]

#BATCH_PATHS = list(Path(INPUT_DIR).glob("*"))
#for batch in BATCH_PATHS:
#    assert Path(batch).is_dir(), f"Batches must be directories, got {batch}"

#BATCHES = [batch.stem for batch in BATCH_PATHS]

# Fast function to concatenate list of lists thanks to Nico SchlÃ¶mer, 2017:
# https://stackoverflow.com/a/45323085
#GENOME_FILES = functools.reduce(
#    operator.iconcat, [list(batch.glob("*.fa")) for batch in BATCH_PATHS], []
#)

#SAMPLES = [genome_file.stem for genome_file in GENOME_FILES]
#BATCHES_AND_SAMPLES = [
#    "/".join([genome_file.parent.stem, genome_file.stem]) for genome_file in GENOME_FILES
#]

OUTPUT_DIR = config["output_directory"]


### Step 2: Specify output files ###


rule all:
    input:
        # CRISPRCasTyper output (generic file that is always created, as not all genomes have CRISPR spacers!)
#        expand(
#            OUTPUT_DIR + "cctyper/{batch_and_sample}/arguments.tab",
#            batch_and_sample=BATCHES_AND_SAMPLES,
#        ),
        
        # geNomad output table with classification probabilities
#        expand(
#            OUTPUT_DIR + "genomad/{batch_and_sample}/{sample}_aggregated_classification/{sample}_aggregated_classification.tsv",
#            batch_and_sample=BATCHES_AND_SAMPLES, sample=SAMPLES,
#        ),


### Step 3: Define processing steps that generate the output ###


rule crisprcastyper:
    input:
        INPUT_DIR + "{batch}/{sample}.fa",
    output:
        arguments=OUTPUT_DIR + "cctyper/{batch}/{sample}/arguments.tab",
        putative_operons=OUTPUT_DIR
        + "cctyper/{batch}/{sample}/cas_operons_putative.tab",
        genes=OUTPUT_DIR + "cctyper/{batch}/{sample}/genes.tab",
        hmmer=OUTPUT_DIR + "cctyper/{batch}/{sample}/hmmer.tab",
    params:
        out_dir=OUTPUT_DIR + "cctyper/{batch}/{sample}",
    conda:
        "envs/cctyper.yaml"
    threads: config["cctyper"]["threads"]
    log:
        "log/cctyper/{batch}/{sample}.txt",
    benchmark:
        "log/benchmark/cctyper/{batch}/{sample}.txt"
    shell:
        """
rm -rf {params.out_dir}
cctyper -t {threads} {input} {params.out_dir} > {log} 2>&1
        """


rule genomad:
    input:
        genome=INPUT_DIR + "{batch}.fasta",
        db=config["genomad_database"],
    output:
        aggregated_classification=OUTPUT_DIR + "genomad/{batch}/{batch}_aggregated_classification/{batch}_aggregated_classification.tsv",
        plasmid_summary=OUTPUT_DIR + "genomad/{batch}/{batch}_summary/{batch}_plasmid_summary.tsv",
        virus_summary=OUTPUT_DIR + "genomad/{batch}/{batch}_summary/{batch}_virus_summary.tsv",
    params:
        output_dir=OUTPUT_DIR + "genomad/{batch}/",
    conda:
        "envs/genomad.yaml"
    threads: config["genomad"]["threads"]
    log:
        "log/genomad/{batch}-one_file.txt",
    benchmark:
        "log/benchmark/genomad/{batch}-one_file.txt"
    shell:
        """
genomad end-to-end -t {threads} --cleanup --enable-score-calibration\
 {input.genome} {params.output_dir} {input.db} > {log} 2>&1
        """
