#! /usr/bin/env python3

## CCTyper extender:
## Read the output files to generate useful files for downstream processing:
## 1. BED files for CRISPR-Cas loci, CRISPR arrays and cas genes
## 2. (Optionally) use the BED files to extract regions from FASTA file?
## 3. Comprehensive CRISPR and cas gene output in one file
##
## To make this, I will need a number of functions:
##  - Take a directory from the command-line
##  - Identify relevant CCTyper output files
##      - CRISPR_Cas.tab for CRISPR-Cas locus (reports positions of cas genes!)
##      - cas_operons*.tab for cas gene info
##      - hmmer.tab for gene lengths
##      - crisprs_*.tab for CRISPR array info
##
## For the BED files, use the following fields:
## 1. contig ID ('chromosome')
## 2. start position
## 3. end position
## 4. name (CRISPR array/cas operon ID)
## 5. score (must be between 0 and 1000: number of CRISPR repeats or cas genes)
## 6. strand (+, - or .)

import argparse
from pathlib import Path
import pandas as pd
import string
from operator import itemgetter

def parse_arguments():
    """
    Parse arguments from the command line:
     -d/--directory = the directory to work in (CCTyper's output directory)
     -h/--help = show help
    """
    parser = argparse.ArgumentParser(
                        prog="CCTyper_extender",
                        description="Read the output generated by CCTyper to generate"
                        "files useful for downstream processing.",
    )

    required = parser.add_argument_group("Required arguments")

    required.add_argument("-d", "--directory",
    dest = "directory", required = True, type = str,
    help = "CCTyper output directory",
    )

    args = parser.parse_args()

    return args


def find_positions(directory):
    """
    Search the input directory for CRISPR-Cas files to determine their positions
    the genome. Write the found information to BED files. If no relevant files
    are found, only write a message to standard output.
    """
    work_dir = Path(directory)
    assert work_dir.is_dir(), "%s is not a directory! Please provide a valid directory." % work_dir

    crispr_cas_info = [] # Store both CRISPR array and cas operon information

    # Try finding the CRISPR-Cas loci
    crispr_cas_file = work_dir / "CRISPR_Cas.tab"
    if crispr_cas_file.is_file():
        print("CRISPR-Cas found in %s" % work_dir.name)

        # CRISPR-Cas data from CRISPR-Cas Typer (CCTyper)
        cc_data = pd.read_csv(crispr_cas_file, sep = "\t")
        contigs = list(cc_data["Contig"]) # contig name as string
        operons = list(cc_data["Operon"]) # cas gene operon ID as string
        crisprs = list(cc_data["CRISPRs"]) # CRISPR array ID
        crisprs = [ crispr.strip('[]\'"') for crispr in crisprs ]
        cas_positions = list(cc_data["Operon_Pos"]) # cas operon start and end as list

        ## Read cas operon information, store in list and write BED file
        cas_file = work_dir / "cas_operons_putative.tab"
        cas_data = pd.read_csv(cas_file, sep = "\t")
        cas_operons_info = []

        cas_operons_bed_file = work_dir / "Cas_operons.bed"
        with open(cas_operons_bed_file, "w") as outfile:
            for index in range(len(operons)):
                contig = contigs[index]
                positions = cas_positions[index].strip('[]').split(', ')
                start = positions[0]
                stop = positions[1]
                operon = operons[index]
                cas_genes = cas_data[cas_data["Operon"] == operon]["Genes"].iloc[0]
                number_of_genes = len(cas_genes.split(', '))

                # Try to infer strand from these cas genes:
                strand_adaptation = cas_data[cas_data["Operon"] == operon]["Strand_Adaptation"].iloc[0]
                strand_interference = cas_data[cas_data["Operon"] == operon]["Strand_Interference"].iloc[0]
                
                if strand_adaptation == 1 and strand_interference == 1:
                    strand = "+"
                elif strand_adaptation == -1 and strand_interference == -1:
                    strand = "-"
                else:
                    strand = "."

                cas_operons_info.append([contig, operon, int(start), int(stop), number_of_genes, strand])

                cas_operons_bed_string = "%s\t%s\t%s\t%s\t%s\t%s\n" % (contig, start, stop, operon, number_of_genes, strand)

            outfile.write(cas_operons_bed_string)

        ## Read CRISPR array information, store in list and write BED file
        crispr_file = work_dir / "crisprs_all.tab"
        crispr_data = pd.read_csv(crispr_file, sep = "\t")
        crispr_info = []

        arrays_bed_file = work_dir / "CRISPR_arrays.bed"
        with open(arrays_bed_file, "w") as outfile:
            for crispr in crisprs:
                contig = crispr.rstrip(string.digits).rstrip('_')
                crispr_start = crispr_data[crispr_data["CRISPR"] == crispr]["Start"].iloc[0]
                crispr_stop = crispr_data[crispr_data["CRISPR"] == crispr]["End"].iloc[0]
                number_of_repeats = crispr_data[crispr_data["CRISPR"] == crispr]["N_repeats"].iloc[0]
                crispr_info.append([crispr, crispr_start, crispr_stop, number_of_repeats])

                crisprs_bed_string = "%s\t%s\t%s\t%s\t%s\t%s\n" % (contig, crispr_start, crispr_stop, crispr, number_of_repeats, strand)

                outfile.write(crisprs_bed_string)

        ## Combine CRISPR array and cas operon information to create CRISPR-Cas BED
        crispr_cas_info = []
        crispr_cas_bed_file = work_dir / "CRISPR-Cas.bed"
        with open(crispr_cas_bed_file, "w") as outfile:
            for index in range(len(crispr_info)):
                crispr_cas_info.append(cas_operons_info[index] + crispr_info[index])
                print(crispr_cas_info)
                contig = crispr_cas_info[index][0]
                # Grab both the start and stop positions for the cas operon and the CRISPR array
                all_starts_and_stops = itemgetter(2, 3, 7, 8)(crispr_cas_info[index])
                start = min(all_starts_and_stops)
                stop = max(all_starts_and_stops)
                array_name = crispr_cas_info[index][6]
                number_of_repeats = crispr_cas_info[index][9]
                strand = crispr_cas_info[index][5]

                crispr_cas_bed_string = "%s\t%s\t%s\t%s\t%s\t%s\n" % (contig, start, stop, array_name, number_of_repeats, strand)
                outfile.write(crispr_cas_bed_string)


    else:
        print("No CRISPR-Cas system found in %s" % work_dir.name)

    return 0

def main():
    arguments = parse_arguments()

    message = (
        "\n"
        "These are the command-line arguments:\n"
        "  DIRECTORY:\n"
        "{0}\n".format(
            arguments.directory
        )
    )

    print(message)

    exit(
        find_positions(arguments.directory)
    )

if __name__=="__main__":
    exit(main())