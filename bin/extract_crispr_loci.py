#! /usr/bin/env python3

import subprocess


def construct_bed_file(info_table, bed_file):
    """
    Take a CRISPR-Cas info file (tab-separated) to read from,
    and a BED file to write to.
    Extracts contig names, start and end positions, and DNA strandness (+/-)
    to generate a BED file or CRISPR-Cas loci.
    """
    samples_and_strandness = {}
    with open(bed_file, "w") as outfile:
        with open(info_table, "r") as infile:
            infile.readline()  # skip the header
            for line in infile:
                elements = line.split("\t")
                # The first element (column) in the line is the sample accession ID
                sample = elements[0]
                # The third (#2) is the complete contig ID
                contig = elements[1]
                complete_contig = ".".join([sample, contig])
                # CRISPR-array start and stop positions are 4 and 5,
                # cas gene start and stop positions are 19 and 20
                positions = [elements[4], elements[5], elements[19], elements[20]]
                # cas genes may be missing: 'NA' as positions
                if positions[2] == "NA" and positions[3] == "NA":
                    print("No cas genes found for %s!" % sample)
                else:
                    # Only if cas genes are present, report and extract CRISPR-Cas locus
                    strandness = elements[26]
                    samples_and_strandness[sample] = strandness

                    start = min(positions)
                    stop = max(positions)

                    bed_entry = "%s\t%s\t%s\t%s" % (
                        complete_contig,
                        start,
                        stop,
                        strandness,
                    )
                    print(bed_entry)

                    outfile.write(bed_entry + "\n")
    return samples_and_strandness


def extract_crispr_loci(samples_and_strandness, bed_file):
    """
    Take a dictionary of samples with CRISPR-Cas locus, and which strand of the
    DNA they are on (+ or -) to find the corresponding fasta file, extract the
    locus using the BED file (generated by the function above) and write to a new
    FASTA file.
    """
    for sample in samples_and_strandness.keys():
        sample_fasta = subprocess.check_output(
            "locate -l 1 %s.fa" % sample, shell=True
        ).splitlines()[0]

        strandness = samples_and_strandness[sample]
        crispr_file = "data/tmp/loci/%s.fasta" % sample

        # If the sequence is on the reverse strand
        if strandness == "-":
            # Use seqkit to reverse complement the sequence
            subseq_process = subprocess.Popen(
                ["seqkit", "subseq", "--bed", bed_file, sample_fasta],
                stdout=subprocess.PIPE,
            )
            seq_process = subprocess.Popen(
                [
                    "seqkit",
                    "seq",
                    "--reverse",
                    "--complement",
                    "-t",
                    "DNA",
                    "-o",
                    crispr_file,
                ],
                stdin=subseq_process.stdout,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
            )
            outs, errs = seq_process.communicate(timeout=10)

        else:
            # In all other cases (+-strand or ambiguous/unknown), just
            #  take the sequence as is:
            seqkit = subprocess.run(
                [
                    "seqkit",
                    "subseq",
                    "--bed",
                    bed_file,
                    sample_fasta,
                    "-o",
                    crispr_file,
                ],
                stderr=None,
                capture_output=False,
            )


def main():
    inputfile = "data/processed/Campylobacter_CRISPR-Cas_info.tsv"
    outputfile = "data/processed/Campylobacter_CRISPR-Cas_loci.bed"

    samples_and_strandness = construct_bed_file(
        info_table=inputfile, bed_file=outputfile
    )

    extract_crispr_loci(
        samples_and_strandness=samples_and_strandness, bed_file=outputfile
    )

    return 0


if __name__ == "__main__":
    exit(main())
